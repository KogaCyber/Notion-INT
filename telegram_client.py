import logging
import asyncio
from typing import Dict, List, Optional
from telegram import Bot
from telegram.constants import ParseMode
from telegram.error import TelegramError

class TelegramIntegration:
    def __init__(self, bot_token: str, channel_id: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            channel_id: ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ username (@channel_name)
        """
        self.bot = Bot(token=bot_token)
        self.channel_id = channel_id
        self.logger = logging.getLogger(__name__)
        
    async def send_notion_item(self, item: Dict) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ Notion –≤ Telegram –∫–∞–Ω–∞–ª
        
        Args:
            item: –≠–ª–µ–º–µ–Ω—Ç –∏–∑ Notion –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            message = self._format_notion_item(item)
            
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=message,
                parse_mode=None,  # –û—Ç–∫–ª—é—á–∞–µ–º Markdown –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
                disable_web_page_preview=False
            )
            
            self.logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª: {item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            return True
            
        except TelegramError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
        except Exception as e:
            self.logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def send_multiple_items(self, items: List[Dict]) -> int:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª
        
        Args:
            items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ Notion
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        sent_count = 0
        
        for item in items:
            success = await self.send_notion_item(item)
            if success:
                sent_count += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await asyncio.sleep(1)
        
        self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∏–∑ {len(items)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        return sent_count
    
    def _format_notion_item(self, item: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ Notion –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        
        Args:
            item: –≠–ª–µ–º–µ–Ω—Ç –∏–∑ Notion
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        title = self._escape_markdown(item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
        status = item.get('status')
        tags = item.get('tags', [])
        url = item.get('url', '')
        created_time = item.get('created_time', '')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        formatted_date = self._format_date(created_time)
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_parts = [f"üìù *{title}*"]
        
        if status:
            status_emoji = self._get_status_emoji(status)
            message_parts.append(f"{status_emoji} –°—Ç–∞—Ç—É—Å: _{self._escape_markdown(status)}_")
        
        if tags:
            tags_text = " ".join([f"#{self._escape_markdown(tag)}" for tag in tags])
            message_parts.append(f"üè∑Ô∏è {tags_text}")
        
        if formatted_date:
            message_parts.append(f"üìÖ {formatted_date}")
        
        if url:
            message_parts.append(f"üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Notion]({url})")
        
        return "\n\n".join(message_parts)
    
    def _escape_markdown(self, text: str) -> str:
        """
        –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown V2
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not text:
            return ""
        
        # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Markdown V2
        escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        
        for char in escape_chars:
            text = text.replace(char, f"\\{char}")
        
        return text
    
    def _get_status_emoji(self, status: str) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        
        Args:
            status: –°—Ç–∞—Ç—É—Å —ç–ª–µ–º–µ–Ω—Ç–∞
            
        Returns:
            –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–º–æ–¥–∑–∏
        """
        status_emojis = {
            'not started': '‚è≥',
            'in progress': 'üîÑ',
            'completed': '‚úÖ',
            'cancelled': '‚ùå',
            'on hold': '‚è∏Ô∏è',
            'review': 'üëÄ',
            'published': 'üöÄ',
            'draft': 'üìù'
        }
        
        return status_emojis.get(status.lower(), 'üìå')
    
    def _format_date(self, date_string: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            date_string: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
        """
        if not date_string:
            return ""
        
        try:
            from datetime import datetime
            dt = datetime.fromisoformat(date_string.replace('Z', '+00:00'))
            return dt.strftime("%d.%m.%Y %H:%M")
        except:
            return date_string
    
    async def send_custom_message(self, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=message,
                parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º Markdown
            )
            
            self.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
            
        except TelegramError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        try:
            bot_info = await self.bot.get_me()
            self.logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ. –ë–æ—Ç: {bot_info.username}")
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
            return False 